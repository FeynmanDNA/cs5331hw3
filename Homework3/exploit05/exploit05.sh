# Bug Category: SQL Injection

# The logic of the sample.php is: 
# 1. the user input their id for SQL query at line 11 in case05.php
# 2. user can click submit button to send a GET request with id as a paramter
# 3. the php script will assemble the id parameter into a SQL statement at line
# 3. the php script will retrieve the content from the database and display to the user at line 51-52 in case05.php

# Exploit: 
# there are sanitization utilities used for the user input, ie the HTMLPurifier in PHP
# to bypass the html purifier and URL encoding, I inserted a nullbyte before the SQL injected script
# so in order to inject 1 or 1=1 --, I transformed the string to 1%00%27or%201=1--%27

#!/bin/bash
python3 exploit05.py
