# Bug Category: Cross-Origin Flaws

# The logic of the case10's controller.php: 
# 1. the user input their value for "msg" in textfield and click "Send message" line 41-42
# 2. the "Send message" button has a onclick event listener line 13 and line 26
# 3. click button will send "msg" value via postMessage() to the embedded iframe in line 24 and line 45
# 4. before sending the "msg" value, html-css-sanitizer-minified.js allows html_sanitize() to be used to sanitize the input
# 5. html_sanitize() will process the msg param's value to remove <script> tags and pseudo-protocol etc at line21
# 6. at line22, controller further processed the msg value by wrapping it in double quotation marks

# The logic of the case10's receiver.php is:
# 1. receiver.php will listen for message from postMessage() from orgin "http://www.wsb.com" at line19
# 2. upon receiving message with that origin, receiver.php first use html_sanitize() to sanitize the input
# 3. then eval() the msg and display onto the DOM via innerHTML at line 26

# Exploit: 
# the parent frame is of origin "http://www.wsb.com", the embedded frame is of a different origin "https://www.wsb.com", so this is
# cross-origin communication. The flaw in this case is the dynamic code evaluation using eval() in the receiving frame javascript
# Both parent and embedded frames implemented html sanitizations via html-css-sanitizer-minified.js
# html-css-sanitizer-minified.js allows html_sanitize() to be used to sanitize the input
# html_sanitize() will process the msg param's value:
# html_sanitize("<iframe src=javascript:alert(1)>", urlX, idX);
# => "<iframe></iframe>"
# html_sanitize("<svg onload='alert(1)'>", urlX, idX);
# => ""
# However, line 22 var format_msg = "\"" + sanitize_msg + "\""; in controller.php is vulnerable for attack
# in particular, we can further wrap our msg value in double-quotations, and this will jump out of the string literals
# and by adding commas in the input of eval(), we can make eval() execute certain portions of the msg as code
# for example eval("",alert(document.cookie),"") will be run as alert(document.cookie)

echo cannot install chromedriver or geckodriver on the VM provided

echo manually input '",alert(document.cookie),"' should work

# #!/bin/bash
# python3 exploit10.py
